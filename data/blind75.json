{
"problems" : [
    {
      "id": "two-sum",
      "title": "Two Sum",
      "difficulty": "easy",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers in the array such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [2, 7, 11, 15],
          "target": 9,
          "expected": [0, 1]
        },
        {
          "id": 2,
          "nums": [3, 2, 4],
          "target": 6,
          "expected": [1, 2]
        },
        {
          "id": 3,
          "nums": [3, 3],
          "target": 6,
          "expected": [0, 1]
        },
        {
          "id": 4,
          "nums": [1, 2, 3, 4, 5],
          "target": 9,
          "expected": [3, 4]
        },
        {
          "id": 5,
          "nums": [-1, -2, -3, -4, -5],
          "target": -8,
          "expected": [2, 4]
        }
      ]
    },
    {
      "id": "best-time-to-buy-and-sell-stock",
      "title": "Best Time to Buy and Sell Stock",
      "difficulty": "easy",
      "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "prices": [7, 1, 5, 3, 6, 4],
          "expected": 5
        },
        {
          "id": 2,
          "prices": [7, 6, 4, 3, 1],
          "expected": 0
        },
        {
          "id": 3,
          "prices": [2, 4, 1],
          "expected": 2
        },
        {
          "id": 4,
          "prices": [1, 2],
          "expected": 1
        },
        {
          "id": 5,
          "prices": [3, 2, 6, 5, 0, 3],
          "expected": 4
        }
      ]
    },
    {
      "id": "contains-duplicate",
      "title": "Contains Duplicate",
      "difficulty": "easy",
      "description": "Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [1, 2, 3, 1],
          "expected": true
        },
        {
          "id": 2,
          "nums": [1, 2, 3, 4],
          "expected": false
        },
        {
          "id": 3,
          "nums": [1, 1, 1, 3, 3, 4, 3, 2, 4, 2],
          "expected": true
        },
        {
          "id": 4,
          "nums": [1],
          "expected": false
        },
        {
          "id": 5,
          "nums": [-1, -1, 2],
          "expected": true
        }
      ]
    },
    {
      "id": "product-of-array-except-self",
      "title": "Product of Array Except Self",
      "difficulty": "medium",
      "description": "Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.\n\nThe product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [1, 2, 3, 4],
          "expected": [24, 12, 8, 6]
        },
        {
          "id": 2,
          "nums": [-1, 1, 0, -3, 3],
          "expected": [0, 0, 9, 0, 0]
        },
        {
          "id": 3,
          "nums": [0, 0],
          "expected": [0, 0]
        },
        {
          "id": 4,
          "nums": [1, -1],
          "expected": [-1, 1]
        },
        {
          "id": 5,
          "nums": [2, 3, 4, 5],
          "expected": [60, 40, 30, 24]
        }
      ]
    },
    {
      "id": "maximum-subarray",
      "title": "Maximum Subarray",
      "difficulty": "medium",
      "description": "Given an integer array `nums`, find the subarray with the largest sum, and return its sum.\n\nA subarray is a contiguous non-empty sequence of elements within an array.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [-2,1,-3,4,-1,2,1,-5,4],
          "expected": 6
        },
        {
          "id": 2,
          "nums": [1],
          "expected": 1
        },
        {
          "id": 3,
          "nums": [5,4,-1,7,8],
          "expected": 23
        },
        {
          "id": 4,
          "nums": [-1,-2,-3,-4],
          "expected": -1
        },
        {
          "id": 5,
          "nums": [-2,1],
          "expected": 1
        }
      ]
    },
    {
      "id": "maximum-product-subarray",
      "title": "Maximum Product Subarray",
      "difficulty": "medium",
      "description": "Given an integer array `nums`, find a subarray that has the largest product, and return the product.\n\nThe test cases are generated so that the answer will fit in a 32-bit integer.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [2,3,-2,4],
          "expected": 6
        },
        {
          "id": 2,
          "nums": [-2,0,-1],
          "expected": 0
        },
        {
          "id": 3,
          "nums": [-2,3,-4],
          "expected": 24
        },
        {
          "id": 4,
          "nums": [0,2],
          "expected": 2
        },
        {
          "id": 5,
          "nums": [-2,-3,-4],
          "expected": 12
        }
      ]
    },
    {
      "id": "find-minimum-in-rotated-sorted-array",
      "title": "Find Minimum in Rotated Sorted Array",
      "difficulty": "medium",
      "description": "Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n\n- `[4,5,6,7,0,1,2]` if it was rotated 4 times\n- `[0,1,2,4,5,6,7]` if it was rotated 7 times\n\nGiven the sorted rotated array `nums` of unique elements, return the minimum element of this array.\n\nYou must write an algorithm that runs in O(log n) time.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [3,4,5,1,2],
          "expected": 1
        },
        {
          "id": 2,
          "nums": [4,5,6,7,0,1,2],
          "expected": 0
        },
        {
          "id": 3,
          "nums": [11,13,15,17],
          "expected": 11
        },
        {
          "id": 4,
          "nums": [2,1],
          "expected": 1
        },
        {
          "id": 5,
          "nums": [5,1,2,3,4],
          "expected": 1
        }
      ]
    },
    {
      "id": "search-in-rotated-sorted-array",
      "title": "Search in Rotated Sorted Array",
      "difficulty": "medium",
      "description": "There is an integer array `nums` sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (1 <= k < nums.length) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed).\n\nGiven the array `nums` after the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.\n\nYou must write an algorithm with O(log n) runtime complexity.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [4,5,6,7,0,1,2],
          "target": 0,
          "expected": 4
        },
        {
          "id": 2,
          "nums": [4,5,6,7,0,1,2],
          "target": 3,
          "expected": -1
        },
        {
          "id": 3,
          "nums": [1],
          "target": 0,
          "expected": -1
        },
        {
          "id": 4,
          "nums": [1,3],
          "target": 3,
          "expected": 1
        },
        {
          "id": 5,
          "nums": [3,1],
          "target": 1,
          "expected": 1
        }
      ]
    },
    {
      "id": "3sum",
      "title": "3Sum",
      "difficulty": "medium",
      "description": "Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [-1,0,1,2,-1,-4],
          "expected": [[-1,-1,2],[-1,0,1]]
        },
        {
          "id": 2,
          "nums": [0,1,1],
          "expected": []
        },
        {
          "id": 3,
          "nums": [0,0,0],
          "expected": [[0,0,0]]
        },
        {
          "id": 4,
          "nums": [-2,0,1,1,2],
          "expected": [[-2,0,2],[-2,1,1]]
        },
        {
          "id": 5,
          "nums": [-1,0,1,2,-1,-4,-2,-3,3,0,4],
          "expected": [[-4,0,4],[-4,1,3],[-3,-1,4],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]
        }
      ]
    },
    {
      "id": "container-with-most-water",
      "title": "Container With Most Water",
      "difficulty": "medium",
      "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "height": [1,8,6,2,5,4,8,3,7],
          "expected": 49
        },
        {
          "id": 2,
          "height": [1,1],
          "expected": 1
        },
        {
          "id": 3,
          "height": [4,3,2,1,4],
          "expected": 16
        },
        {
          "id": 4,
          "height": [1,2,4,3],
          "expected": 4
        },
        {
          "id": 5,
          "height": [2,3,10,5,7,8,9],
          "expected": 36
        }
      ]
    },
    {
      "id": "longest-substring-without-repeating-characters",
      "title": "Longest Substring Without Repeating Characters",
      "difficulty": "medium",
      "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "abcabcbb",
          "expected": 3
        },
        {
          "id": 2,
          "s": "bbbbb",
          "expected": 1
        },
        {
          "id": 3,
          "s": "pwwkew",
          "expected": 3
        },
        {
          "id": 4,
          "s": "",
          "expected": 0
        },
        {
          "id": 5,
          "s": "dvdf",
          "expected": 3
        }
      ]
    },
    {
      "id": "longest-repeating-character-replacement",
      "title": "Longest Repeating Character Replacement",
      "difficulty": "medium",
      "description": "You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "ABAB",
          "k": 2,
          "expected": 4
        },
        {
          "id": 2,
          "s": "AABABBA",
          "k": 1,
          "expected": 4
        },
        {
          "id": 3,
          "s": "AAAA",
          "k": 2,
          "expected": 4
        },
        {
          "id": 4,
          "s": "ABBB",
          "k": 2,
          "expected": 4
        },
        {
          "id": 5,
          "s": "AAAB",
          "k": 0,
          "expected": 3
        }
      ]
    },
    {
      "id": "minimum-window-substring",
      "title": "Minimum Window Substring",
      "difficulty": "hard",
      "description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n\nThe testcases will be generated such that the answer is unique.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "ADOBECODEBANC",
          "t": "ABC",
          "expected": "BANC"
        },
        {
          "id": 2,
          "s": "a",
          "t": "a",
          "expected": "a"
        },
        {
          "id": 3,
          "s": "a",
          "t": "aa",
          "expected": ""
        },
        {
          "id": 4,
          "s": "ab",
          "t": "b",
          "expected": "b"
        },
        {
          "id": 5,
          "s": "ADOBECODEBANC",
          "t": "ABBC",
          "expected": "BECODEBA"
        }
      ]
    },
    {
      "id": "valid-palindrome",
      "title": "Valid Palindrome",
      "difficulty": "easy",
      "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` if it is a palindrome, or `false` otherwise.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "A man, a plan, a canal: Panama",
          "expected": true
        },
        {
          "id": 2,
          "s": "race a car",
          "expected": false
        },
        {
          "id": 3,
          "s": " ",
          "expected": true
        },
        {
          "id": 4,
          "s": "0P",
          "expected": false
        },
        {
          "id": 5,
          "s": "ab_a",
          "expected": true
        }
      ]
    },
    {
      "id": "valid-anagram",
      "title": "Valid Anagram",
      "difficulty": "easy",
      "description": "Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "anagram",
          "t": "nagaram",
          "expected": true
        },
        {
          "id": 2,
          "s": "rat",
          "t": "car",
          "expected": false
        },
        {
          "id": 3,
          "s": "",
          "t": "",
          "expected": true
        },
        {
          "id": 4,
          "s": "aacc",
          "t": "ccac",
          "expected": false
        },
        {
          "id": 5,
          "s": "cinema",
          "t": "iceman",
          "expected": true
        }
      ]
    },
    {
      "id": "group-anagrams",
      "title": "Group Anagrams",
      "difficulty": "medium",
      "description": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "strs": ["eat","tea","tan","ate","nat","bat"],
          "expected": [["bat"],["nat","tan"],["ate","eat","tea"]]
        },
        {
          "id": 2,
          "strs": [""],
          "expected": [[""]]
        },
        {
          "id": 3,
          "strs": ["a"],
          "expected": [["a"]]
        },
        {
          "id": 4,
          "strs": ["",""],
          "expected": [["",""]]
        },
        {
          "id": 5,
          "strs": ["hhhhu","tttti","tttit","hhhuh","hhuhh"],
          "expected": [["hhhhu","hhhuh","hhuhh"],["tttti","tttit"]]
        }
      ]
    },
    {
      "id": "palindromic-substrings",
      "title": "Palindromic Substrings",
      "difficulty": "medium",
      "description": "Given a string `s`, return the number of palindromic substrings in it.\n\nA string is a palindrome when it reads the same backward as forward.\n\nA substring is a contiguous sequence of characters within the string.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "abc",
          "expected": 3
        },
        {
          "id": 2,
          "s": "aaa",
          "expected": 6
        },
        {
          "id": 3,
          "s": "aba",
          "expected": 4
        },
        {
          "id": 4,
          "s": "abba",
          "expected": 6
        },
        {
          "id": 5,
          "s": "abcd",
          "expected": 4
        }
      ]
    },
    {
      "id": "encode-and-decode-strings",
      "title": "Encode and Decode Strings",
      "difficulty": "medium",
      "description": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\n\nPlease implement encode and decode.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "input": ["Hello","World"],
          "expected": ["Hello","World"]
        },
        {
          "id": 2,
          "input": [""],
          "expected": [""]
        },
        {
          "id": 3,
          "input": ["Hello","World","!"],
          "expected": ["Hello","World","!"]
        },
        {
          "id": 4,
          "input": [""],
          "expected": [""]
        },
        {
          "id": 5,
          "input": ["Hello#World","Coding#Fun"],
          "expected": ["Hello#World","Coding#Fun"]
        }
      ]
    },
    {
      "id": "merge-intervals",
      "title": "Merge Intervals",
      "difficulty": "medium",
      "description": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "intervals": [[1,3],[2,6],[8,10],[15,18]],
          "expected": [[1,6],[8,10],[15,18]]
        },
        {
          "id": 2,
          "intervals": [[1,4],[4,5]],
          "expected": [[1,5]]
        },
        {
          "id": 3,
          "intervals": [[1,4],[2,3]],
          "expected": [[1,4]]
        },
        {
          "id": 4,
          "intervals": [[1,4],[0,4]],
          "expected": [[0,4]]
        },
        {
          "id": 5,
          "intervals": [[1,4],[0,0]],
          "expected": [[0,0],[1,4]]
        }
      ]
    },
    {
      "id": "non-overlapping-intervals",
      "title": "Non-overlapping Intervals",
      "difficulty": "medium",
      "description": "Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "intervals": [[1,2],[2,3],[3,4],[1,3]],
          "expected": 1
        },
        {
          "id": 2,
          "intervals": [[1,2],[1,2],[1,2]],
          "expected": 2
        },
        {
          "id": 3,
          "intervals": [[1,2],[2,3]],
          "expected": 0
        },
        {
          "id": 4,
          "intervals": [[1,100],[11,22],[1,11],[2,12]],
          "expected": 2
        },
        {
          "id": 5,
          "intervals": [[1,4],[2,3],[3,4]],
          "expected": 1
        }
      ]
    },
    {
      "id": "insert-interval",
      "title": "Insert Interval",
      "difficulty": "medium", 
      "description": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the ith interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "intervals": [[1,3],[6,9]],
          "newInterval": [2,5],
          "expected": [[1,5],[6,9]]
        },
        {
          "id": 2,
          "intervals": [[1,2],[3,5],[6,7],[8,10],[12,16]],
          "newInterval": [4,8],
          "expected": [[1,2],[3,10],[12,16]]
        },
        {
          "id": 3,
          "intervals": [],
          "newInterval": [5,7],
          "expected": [[5,7]]
        },
        {
          "id": 4,
          "intervals": [[1,5]],
          "newInterval": [2,3],
          "expected": [[1,5]]
        },
        {
          "id": 5,
          "intervals": [[1,5]],
          "newInterval": [2,7],
          "expected": [[1,7]]
        }
      ]
    },
    {
      "id": "meeting-rooms",
      "title": "Meeting Rooms",
      "difficulty": "easy",
      "description": "Given an array of meeting time intervals consisting of start and end times `[[s1,e1],[s2,e2],...]` (si < ei), determine if a person could attend all meetings.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "intervals": [[0,30],[5,10],[15,20]],
          "expected": false
        },
        {
          "id": 2,
          "intervals": [[7,10],[2,4]],
          "expected": true
        },
        {
          "id": 3,
          "intervals": [[1,2],[2,3],[3,4]],
          "expected": true
        },
        {
          "id": 4,
          "intervals": [[1,5],[5,10]],
          "expected": true
        },
        {
          "id": 5,
          "intervals": [[1,5],[2,3],[4,6]],
          "expected": false
        }
      ]
    },
    {
      "id": "reverse-linked-list",
      "title": "Reverse Linked List",
      "difficulty": "easy",
      "description": "Given the `head` of a singly linked list, reverse the list, and return the reversed list.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "head": [1,2,3,4,5],
          "expected": [5,4,3,2,1]
        },
        {
          "id": 2,
          "head": [1,2],
          "expected": [2,1]
        },
        {
          "id": 3,
          "head": [],
          "expected": []
        },
        {
          "id": 4,
          "head": [1],
          "expected": [1]
        },
        {
          "id": 5,
          "head": [1,2,3],
          "expected": [3,2,1]
        }
      ]
    },
    {
      "id": "linked-list-cycle",
      "title": "Linked List Cycle",
      "difficulty": "easy",
      "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "head": [3,2,0,-4],
          "pos": 1,
          "expected": true
        },
        {
          "id": 2,
          "head": [1,2],
          "pos": 0,
          "expected": true
        },
        {
          "id": 3,
          "head": [1],
          "pos": -1,
          "expected": false
        },
        {
          "id": 4,
          "head": [1,2,3,4],
          "pos": -1,
          "expected": false
        },
        {
          "id": 5,
          "head": [1,2,3,4],
          "pos": 1,
          "expected": true
        }
      ]
    },
    {
      "id": "merge-two-sorted-lists",
      "title": "Merge Two Sorted Lists",
      "difficulty": "easy",
      "description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "list1": [1,2,4],
          "list2": [1,3,4],
          "expected": [1,1,2,3,4,4]
        },
        {
          "id": 2,
          "list1": [],
          "list2": [],
          "expected": []
        },
        {
          "id": 3,
          "list1": [],
          "list2": [0],
          "expected": [0]
        },
        {
          "id": 4,
          "list1": [1],
          "list2": [2],
          "expected": [1,2]
        },
        {
          "id": 5,
          "list1": [1,3,5],
          "list2": [2,4,6],
          "expected": [1,2,3,4,5,6]
        }
      ]
    },
    {
      "id": "remove-nth-node-from-end-of-list",
      "title": "Remove Nth Node From End of List",
      "difficulty": "medium",
      "description": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "head": [1,2,3,4,5],
          "n": 2,
          "expected": [1,2,3,5]
        },
        {
          "id": 2,
          "head": [1],
          "n": 1,
          "expected": []
        },
        {
          "id": 3,
          "head": [1,2],
          "n": 1,
          "expected": [1]
        },
        {
          "id": 4,
          "head": [1,2,3],
          "n": 3,
          "expected": [2,3]
        },
        {
          "id": 5,
          "head": [1,2,3,4],
          "n": 4,
          "expected": [2,3,4]
        }
      ]
    },
    {
      "id": "reorder-list",
      "title": "Reorder List",
      "difficulty": "medium",
      "description": "You are given the head of a singly linked-list. The list can be represented as:\n\nL0 → L1 → … → Ln - 1 → Ln\nReorder the list to be on the following form:\n\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "head": [1,2,3,4],
          "expected": [1,4,2,3]
        },
        {
          "id": 2,
          "head": [1,2,3,4,5],
          "expected": [1,5,2,4,3]
        },
        {
          "id": 3,
          "head": [1],
          "expected": [1]
        },
        {
          "id": 4,
          "head": [1,2],
          "expected": [1,2]
        },
        {
          "id": 5,
          "head": [1,2,3],
          "expected": [1,3,2]
        }
      ]
    },
    {
      "id": "set-matrix-zeroes",
      "title": "Set Matrix Zeroes",
      "difficulty": "medium",
      "description": "Given an `m x n` integer matrix matrix, if an element is 0, set its entire row and column to 0's.\n\nYou must do it in place.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "matrix": [[1,1,1],[1,0,1],[1,1,1]],
          "expected": [[1,0,1],[0,0,0],[1,0,1]]
        },
        {
          "id": 2,
          "matrix": [[0,1,2,0],[3,4,5,2],[1,3,1,5]],
          "expected": [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
        },
        {
          "id": 3,
          "matrix": [[1,2,3],[4,0,6],[7,8,9]],
          "expected": [[1,0,3],[0,0,0],[7,0,9]]
        },
        {
          "id": 4,
          "matrix": [[1]],
          "expected": [[1]]
        },
        {
          "id": 5,
          "matrix": [[0]],
          "expected": [[0]]
        }
      ]
    },
    {
      "id": "spiral-matrix",
      "title": "Spiral Matrix",
      "difficulty": "medium",
      "description": "Given an `m x n` matrix, return all elements of the matrix in spiral order.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "matrix": [[1,2,3],[4,5,6],[7,8,9]],
          "expected": [1,2,3,6,9,8,7,4,5]
        },
        {
          "id": 2,
          "matrix": [[1,2,3,4],[5,6,7,8],[9,10,11,12]],
          "expected": [1,2,3,4,8,12,11,10,9,5,6,7]
        },
        {
          "id": 3,
          "matrix": [[1]],
          "expected": [1]
        },
        {
          "id": 4,
          "matrix": [[1,2],[3,4]],
          "expected": [1,2,4,3]
        },
        {
          "id": 5,
          "matrix": [[1,2,3],[4,5,6]],
          "expected": [1,2,3,6,5,4]
        }
      ]
    },
    {
      "id": "rotate-image",
      "title": "Rotate Image",
      "difficulty": "medium",
      "description": "You are given an `n x n` 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "matrix": [[1,2,3],[4,5,6],[7,8,9]],
          "expected": [[7,4,1],[8,5,2],[9,6,3]]
        },
        {
          "id": 2,
          "matrix": [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]],
          "expected": [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
        },
        {
          "id": 3,
          "matrix": [[1]],
          "expected": [[1]]
        },
        {
          "id": 4,
          "matrix": [[1,2],[3,4]],
          "expected": [[3,1],[4,2]]
        },
        {
          "id": 5,
          "matrix": [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],
          "expected": [[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]
        }
      ]
    },
    {
      "id": "word-search",
      "title": "Word Search",
      "difficulty": "medium",
      "description": "Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "board": [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],
          "word": "ABCCED",
          "expected": true
        },
        {
          "id": 2,
          "board": [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],
          "word": "SEE",
          "expected": true
        },
        {
          "id": 3,
          "board": [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],
          "word": "ABCB",
          "expected": false
        },
        {
          "id": 4,
          "board": [["A"]],
          "word": "A",
          "expected": true
        },
        {
          "id": 5,
          "board": [["A","B"],["C","D"]],
          "word": "ABCD",
          "expected": false
        }
      ]
    },
    {
      "id": "number-of-islands",
      "title": "Number of Islands",
      "difficulty": "medium",
      "description": "Given an `m x n` 2D binary grid `grid` which represents a map of '1's (land) and '0's (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "grid": [
            ["1","1","1","1","0"],
            ["1","1","0","1","0"],
            ["1","1","0","0","0"],
            ["0","0","0","0","0"]
          ],
          "expected": 1
        },
        {
          "id": 2,
          "grid": [
            ["1","1","0","0","0"],
            ["1","1","0","0","0"],
            ["0","0","1","0","0"],
            ["0","0","0","1","1"]
          ],
          "expected": 3
        },
        {
          "id": 3,
          "grid": [["1","0","1","1","0","1","1"]],
          "expected": 3
        },
        {
          "id": 4,
          "grid": [["1"],["1"]],
          "expected": 1
        },
        {
          "id": 5,
          "grid": [["0"]],
          "expected": 0
        }
      ]
    },
    {
      "id": "pacific-atlantic-water-flow",
      "title": "Pacific Atlantic Water Flow",
      "difficulty": "medium",
      "description": "There is an `m x n` rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n\nThe island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the height above sea level of the cell at coordinate `(r, c)`.\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\nReturn a 2D list of grid coordinates `result` where `result[i] = [ri, ci]` denotes that rain water can flow from cell `(ri, ci)` to both the Pacific and Atlantic oceans.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "heights": [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]],
          "expected": [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
        },
        {
          "id": 2,
          "heights": [[2,1],[1,2]],
          "expected": [[0,0],[0,1],[1,0],[1,1]]
        },
        {
          "id": 3,
          "heights": [[1]],
          "expected": [[0,0]]
        },
        {
          "id": 4,
          "heights": [[1,2,3],[8,9,4],[7,6,5]],
          "expected": [[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]]
        },
        {
          "id": 5,
          "heights": [[1,2],[4,3]],
          "expected": [[0,1],[1,0],[1,1]]
        }
      ]
    },
    {
      "id": "longest-consecutive-sequence",
      "title": "Longest Consecutive Sequence",
      "difficulty": "medium",
      "description": "Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.\n\nYou must write an algorithm that runs in O(n) time.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [100,4,200,1,3,2],
          "expected": 4
        },
        {
          "id": 2,
          "nums": [0,3,7,2,5,8,4,6,0,1],
          "expected": 9
        },
        {
          "id": 3,
          "nums": [],
          "expected": 0
        },
        {
          "id": 4,
          "nums": [1],
          "expected": 1
        },
        {
          "id": 5,
          "nums": [1,2,0,1],
          "expected": 3
        }
      ]
    },
    {
      "id": "clone-graph",
      "title": "Clone Graph",
      "difficulty": "medium",
      "description": "Given a reference of a node in a connected undirected graph.\n\nReturn a deep copy (clone) of the graph.\n\nEach node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "adjList": [[2,4],[1,3],[2,4],[1,3]],
          "expected": [[2,4],[1,3],[2,4],[1,3]]
        },
        {
          "id": 2,
          "adjList": [[]],
          "expected": [[]]
        },
        {
          "id": 3,
          "adjList": [],
          "expected": []
        },
        {
          "id": 4,
          "adjList": [[2],[1]],
          "expected": [[2],[1]]
        },
        {
          "id": 5,
          "adjList": [[2,3,4],[1,3,4],[1,2,4],[1,2,3]],
          "expected": [[2,3,4],[1,3,4],[1,2,4],[1,2,3]]
        }
      ]
    },
    {
      "id": "course-schedule",
      "title": "Course Schedule",
      "difficulty": "medium",
      "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.\n\nFor example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "numCourses": 2,
          "prerequisites": [[1,0]],
          "expected": true
        },
        {
          "id": 2,
          "numCourses": 2,
          "prerequisites": [[1,0],[0,1]],
          "expected": false
        },
        {
          "id": 3,
          "numCourses": 5,
          "prerequisites": [[0,1],[0,2],[1,3],[1,4],[3,4]],
          "expected": true
        },
        {
          "id": 4,
          "numCourses": 3,
          "prerequisites": [[1,0],[2,1],[0,2]],
          "expected": false
        },
        {
          "id": 5,
          "numCourses": 4,
          "prerequisites": [[1,0],[2,0],[3,1],[3,2]],
          "expected": true
        }
      ]
    },
    {
      "id": "number-of-connected-components-in-undirected-graph",
      "title": "Number of Connected Components in an Undirected Graph",
      "difficulty": "medium",
      "description": "You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n\nReturn the number of connected components in the graph.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 5,
          "edges": [[0,1],[1,2],[3,4]],
          "expected": 2
        },
        {
          "id": 2,
          "n": 5,
          "edges": [[0,1],[1,2],[2,3],[3,4]],
          "expected": 1
        },
        {
          "id": 3,
          "n": 4,
          "edges": [[0,1],[2,3],[1,2]],
          "expected": 1
        },
        {
          "id": 4,
          "n": 6,
          "edges": [[0,1],[0,2],[3,4],[4,5]],
          "expected": 2
        },
        {
          "id": 5,
          "n": 3,
          "edges": [],
          "expected": 3
        }
      ]
    },
    {
      "id": "graph-valid-tree",
      "title": "Graph Valid Tree",
      "difficulty": "medium",
      "description": "You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer `n` and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.\n\nReturn `true` if the edges of the given graph make up a valid tree, and `false` otherwise.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 5,
          "edges": [[0,1],[0,2],[0,3],[1,4]],
          "expected": true
        },
        {
          "id": 2,
          "n": 5,
          "edges": [[0,1],[1,2],[2,3],[1,3],[1,4]],
          "expected": false
        },
        {
          "id": 3,
          "n": 4,
          "edges": [[0,1],[2,3]],
          "expected": false
        },
        {
          "id": 4,
          "n": 3,
          "edges": [[0,1],[1,2],[2,0]],
          "expected": false
        },
        {
          "id": 5,
          "n": 2,
          "edges": [[0,1]],
          "expected": true
        }
      ]
    },
    {
      "id": "alien-dictionary",
      "title": "Alien Dictionary",
      "difficulty": "hard",
      "description": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\n\nYou are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are sorted lexicographically by the rules of this new language.\n\nReturn a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return \"\". If there are multiple solutions, return any of them.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "words": ["wrt","wrf","er","ett","rftt"],
          "expected": "wertf"
        },
        {
          "id": 2,
          "words": ["z","x"],
          "expected": "zx"
        },
        {
          "id": 3,
          "words": ["z","x","z"],
          "expected": ""
        },
        {
          "id": 4,
          "words": ["ac","ab","zc","zb"],
          "expected": "aczb"
        },
        {
          "id": 5,
          "words": ["abc","ab"],
          "expected": ""
        }
      ]
    },
    {
      "id": "climbing-stairs",
      "title": "Climbing Stairs",
      "difficulty": "easy",
      "description": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 2,
          "expected": 2
        },
        {
          "id": 2,
          "n": 3,
          "expected": 3
        },
        {
          "id": 3,
          "n": 4,
          "expected": 5
        },
        {
          "id": 4,
          "n": 5,
          "expected": 8
        },
        {
          "id": 5,
          "n": 6,
          "expected": 13
        }
      ]
    },
    {
      "id": "invert-binary-tree",
      "title": "Invert Binary Tree",
      "difficulty": "easy",
      "description": "Given the `root` of a binary tree, invert the tree, and return its root.\n\nInverting a binary tree means swapping each node's left and right children.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [4,2,7,1,3,6,9],
          "expected": [4,7,2,9,6,3,1]
        },
        {
          "id": 2,
          "root": [2,1,3],
          "expected": [2,3,1]
        },
        {
          "id": 3,
          "root": [],
          "expected": []
        },
        {
          "id": 4,
          "root": [1],
          "expected": [1]
        },
        {
          "id": 5,
          "root": [1,2],
          "expected": [1,null,2]
        }
      ]
    },
    {
      "id": "maximum-depth-of-binary-tree",
      "title": "Maximum Depth of Binary Tree",
      "difficulty": "easy",
      "description": "Given the `root` of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [3,9,20,null,null,15,7],
          "expected": 3
        },
        {
          "id": 2,
          "root": [1,null,2],
          "expected": 2
        },
        {
          "id": 3,
          "root": [],
          "expected": 0
        },
        {
          "id": 4,
          "root": [0],
          "expected": 1
        },
        {
          "id": 5,
          "root": [1,2,3,4,5],
          "expected": 3
        }
      ]
    },
    {
      "id": "same-tree",
      "title": "Same Tree",
      "difficulty": "easy",
      "description": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "p": [1,2,3],
          "q": [1,2,3],
          "expected": true
        },
        {
          "id": 2,
          "p": [1,2],
          "q": [1,null,2],
          "expected": false
        },
        {
          "id": 3,
          "p": [1,2,1],
          "q": [1,1,2],
          "expected": false
        },
        {
          "id": 4,
          "p": [],
          "q": [],
          "expected": true
        },
        {
          "id": 5,
          "p": [1],
          "q": [1],
          "expected": true
        }
      ]
    },
    {
      "id": "binary-tree-level-order-traversal",
      "title": "Binary Tree Level Order Traversal",
      "difficulty": "medium",
      "description": "Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [3,9,20,null,null,15,7],
          "expected": [[3],[9,20],[15,7]]
        },
        {
          "id": 2,
          "root": [1],
          "expected": [[1]]
        },
        {
          "id": 3,
          "root": [],
          "expected": []
        },
        {
          "id": 4,
          "root": [1,2,3,4,null,null,5],
          "expected": [[1],[2,3],[4,5]]
        },
        {
          "id": 5,
          "root": [1,2],
          "expected": [[1],[2]]
        }
      ]
    },
    {
      "id": "serialize-and-deserialize-binary-tree",
      "title": "Serialize and Deserialize Binary Tree",
      "difficulty": "hard",
      "description": "Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [1,2,3,null,null,4,5],
          "expected": [1,2,3,null,null,4,5]
        },
        {
          "id": 2,
          "root": [],
          "expected": []
        },
        {
          "id": 3,
          "root": [1],
          "expected": [1]
        },
        {
          "id": 4,
          "root": [1,2],
          "expected": [1,2]
        },
        {
          "id": 5,
          "root": [5,4,7,3,null,2,null,-1,null,9],
          "expected": [5,4,7,3,null,2,null,-1,null,9]
        }
      ]
    },
    {
      "id": "subtree-of-another-tree",
      "title": "Subtree of Another Tree",
      "difficulty": "easy",
      "description": "Given the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of `subRoot` and `false` otherwise.\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [3,4,5,1,2],
          "subRoot": [4,1,2],
          "expected": true
        },
        {
          "id": 2,
          "root": [3,4,5,1,2,null,null,null,null,0],
          "subRoot": [4,1,2],
          "expected": false
        },
        {
          "id": 3,
          "root": [1,1],
          "subRoot": [1],
          "expected": true
        },
        {
          "id": 4,
          "root": [3,4,5,1,null,2],
          "subRoot": [3,1,2],
          "expected": false
        },
        {
          "id": 5,
          "root": [1],
          "subRoot": [1],
          "expected": true
        }
      ]
    },
    {
      "id": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "difficulty": "medium",
      "description": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "preorder": [3,9,20,15,7],
          "inorder": [9,3,15,20,7],
          "expected": [3,9,20,null,null,15,7]
        },
        {
          "id": 2,
          "preorder": [-1],
          "inorder": [-1],
          "expected": [-1]
        },
        {
          "id": 3,
          "preorder": [1,2],
          "inorder": [2,1],
          "expected": [1,2]
        },
        {
          "id": 4,
          "preorder": [1,2,3],
          "inorder": [3,2,1],
          "expected": [1,2,null,3]
        },
        {
          "id": 5,
          "preorder": [1,2,4,5,3,6,7],
          "inorder": [4,2,5,1,6,3,7],
          "expected": [1,2,3,4,5,6,7]
        }
      ]
    },
    {
      "id": "validate-binary-search-tree",
      "title": "Validate Binary Search Tree",
      "difficulty": "medium",
      "description": "Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [2,1,3],
          "expected": true
        },
        {
          "id": 2,
          "root": [5,1,4,null,null,3,6],
          "expected": false
        },
        {
          "id": 3,
          "root": [1],
          "expected": true
        },
        {
          "id": 4,
          "root": [5,4,6,null,null,3,7],
          "expected": false
        },
        {
          "id": 5,
          "root": [3,1,5,0,2,4,6],
          "expected": true
        }
      ]
    },
    {
      "id": "kth-smallest-element-in-a-bst",
      "title": "Kth Smallest Element in a BST",
      "difficulty": "medium",
      "description": "Given the `root` of a binary search tree, and an integer `k`, return the `k`th smallest value (1-indexed) of all the values of the nodes in the tree.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [3,1,4,null,2],
          "k": 1,
          "expected": 1
        },
        {
          "id": 2,
          "root": [5,3,6,2,4,null,null,1],
          "k": 3,
          "expected": 3
        },
        {
          "id": 3,
          "root": [1],
          "k": 1,
          "expected": 1
        },
        {
          "id": 4,
          "root": [3,1,4,null,2],
          "k": 4,
          "expected": 4
        },
        {
          "id": 5,
          "root": [5,3,6,2,4,null,null,1],
          "k": 5,
          "expected": 5
        }
      ]
    },
    {
      "id": "lowest-common-ancestor-of-a-binary-search-tree",
      "title": "Lowest Common Ancestor of a Binary Search Tree",
      "difficulty": "medium",
      "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n\nThe lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "root": [6,2,8,0,4,7,9,null,null,3,5],
          "p": 2,
          "q": 8,
          "expected": 6
        },
        {
          "id": 2,
          "root": [6,2,8,0,4,7,9,null,null,3,5],
          "p": 2,
          "q": 4,
          "expected": 2
        },
        {
          "id": 3,
          "root": [2,1],
          "p": 2,
          "q": 1,
          "expected": 2
        },
        {
          "id": 4,
          "root": [3,1,4,null,2],
          "p": 1,
          "q": 4,
          "expected": 3
        },
        {
          "id": 5,
          "root": [5,3,6,2,4,null,null,1],
          "p": 1,
          "q": 4,
          "expected": 3
        }
      ]
    },
    {
      "id": "binary-search",
      "title": "Binary Search",
      "difficulty": "easy",
      "description": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with O(log n) runtime complexity.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [-1,0,3,5,9,12],
          "target": 9,
          "expected": 4
        },
        {
          "id": 2,
          "nums": [-1,0,3,5,9,12],
          "target": 2,
          "expected": -1
        },
        {
          "id": 3,
          "nums": [5],
          "target": 5,
          "expected": 0
        },
        {
          "id": 4,
          "nums": [1,2,3,4,5],
          "target": 3,
          "expected": 2
        },
        {
          "id": 5,
          "nums": [-5,-3,0,1,3,5],
          "target": -3,
          "expected": 1
        }
      ]
    },
    {
      "id": "coin-change",
      "title": "Coin Change",
      "difficulty": "medium",
      "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\nYou may assume that you have an infinite number of each kind of coin.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "coins": [1,2,5],
          "amount": 11,
          "expected": 3
        },
        {
          "id": 2,
          "coins": [2],
          "amount": 3,
          "expected": -1
        },
        {
          "id": 3,
          "coins": [1],
          "amount": 0,
          "expected": 0
        },
        {
          "id": 4,
          "coins": [1,3,4,5],
          "amount": 7,
          "expected": 2
        },
        {
          "id": 5,
          "coins": [2,5,10,1],
          "amount": 27,
          "expected": 4
        }
      ]
    },
    {
      "id": "longest-increasing-subsequence",
      "title": "Longest Increasing Subsequence",
      "difficulty": "medium",
      "description": "Given an integer array `nums`, return the length of the longest strictly increasing subsequence.\n\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [10,9,2,5,3,7,101,18],
          "expected": 4
        },
        {
          "id": 2,
          "nums": [0,1,0,3,2,3],
          "expected": 4
        },
        {
          "id": 3,
          "nums": [7,7,7,7,7,7,7],
          "expected": 1
        },
        {
          "id": 4,
          "nums": [1,3,6,7,9,4,10,5,6],
          "expected": 6
        },
        {
          "id": 5,
          "nums": [3,10,2,1,20],
          "expected": 3
        }
      ]
    },
    {
      "id": "word-break",
      "title": "Word Break",
      "difficulty": "medium",
      "description": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "leetcode",
          "wordDict": ["leet","code"],
          "expected": true
        },
        {
          "id": 2,
          "s": "applepenapple",
          "wordDict": ["apple","pen"],
          "expected": true
        },
        {
          "id": 3,
          "s": "catsandog",
          "wordDict": ["cats","dog","sand","and","cat"],
          "expected": false
        },
        {
          "id": 4,
          "s": "cars",
          "wordDict": ["car","ca","rs"],
          "expected": true
        },
        {
          "id": 5,
          "s": "aaaaaaa",
          "wordDict": ["aaaa","aaa"],
          "expected": true
        }
      ]
    },
    {
      "id": "combination-sum-iv",
      "title": "Combination Sum IV",
      "difficulty": "medium",
      "description": "Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`.\n\nThe test cases are generated so that the answer can fit in a 32-bit integer.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [1,2,3],
          "target": 4,
          "expected": 7
        },
        {
          "id": 2,
          "nums": [9],
          "target": 3,
          "expected": 0
        },
        {
          "id": 3,
          "nums": [1,2,3],
          "target": 32,
          "expected": 181997
        },
        {
          "id": 4,
          "nums": [2,1,3],
          "target": 35,
          "expected": 1132436852
        },
        {
          "id": 5,
          "nums": [4,2,1],
          "target": 7,
          "expected": 13
        }
      ]
    },
    {
      "id": "house-robber",
      "title": "House Robber",
      "difficulty": "medium",
      "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [1,2,3,1],
          "expected": 4
        },
        {
          "id": 2,
          "nums": [2,7,9,3,1],
          "expected": 12
        },
        {
          "id": 3,
          "nums": [2,1,1,2],
          "expected": 4
        },
        {
          "id": 4,
          "nums": [1],
          "expected": 1
        },
        {
          "id": 5,
          "nums": [1,3,1,3,100],
          "expected": 103
        }
      ]
    },
    {
      "id": "house-robber-ii",
      "title": "House Robber II",
      "difficulty": "medium",
      "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [2,3,2],
          "expected": 3
        },
        {
          "id": 2,
          "nums": [1,2,3,1],
          "expected": 4
        },
        {
          "id": 3,
          "nums": [1,2,3],
          "expected": 3
        },
        {
          "id": 4,
          "nums": [1],
          "expected": 1
        },
        {
          "id": 5,
          "nums": [1,3,1,3,100],
          "expected": 103
        }
      ]
    },
    {
      "id": "decode-ways",
      "title": "Decode Ways",
      "difficulty": "medium",
      "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n- \"AAJF\" with the grouping (1 1 10 6)\n- \"KJF\" with the grouping (11 10 6)\n\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\n\nGiven a string `s` containing only digits, return the number of ways to decode it.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "s": "12",
          "expected": 2
        },
        {
          "id": 2,
          "s": "226",
          "expected": 3
        },
        {
          "id": 3,
          "s": "06",
          "expected": 0
        },
        {
          "id": 4,
          "s": "27",
          "expected": 1
        },
        {
          "id": 5,
          "s": "11106",
          "expected": 2
        }
      ]
    },
    {
      "id": "unique-paths",
      "title": "Unique Paths",
      "difficulty": "medium",
      "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\n\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "m": 3,
          "n": 7,
          "expected": 28
        },
        {
          "id": 2,
          "m": 3,
          "n": 2,
          "expected": 3
        },
        {
          "id": 3,
          "m": 7,
          "n": 3,
          "expected": 28
        },
        {
          "id": 4,
          "m": 3,
          "n": 3,
          "expected": 6
        },
        {
          "id": 5,
          "m": 1,
          "n": 1,
          "expected": 1
        }
      ]
    },
    {
      "id": "jump-game",
      "title": "Jump Game",
      "difficulty": "medium",
      "description": "You are given an integer array `nums`. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\n\nReturn `true` if you can reach the last index, or `false` otherwise.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [2,3,1,1,4],
          "expected": true
        },
        {
          "id": 2,
          "nums": [3,2,1,0,4],
          "expected": false
        },
        {
          "id": 3,
          "nums": [0],
          "expected": true
        },
        {
          "id": 4,
          "nums": [2,0],
          "expected": true
        },
        {
          "id": 5,
          "nums": [1,1,1,0],
          "expected": true
        }
      ]
    },
    {
      "id": "number-of-1-bits",
      "title": "Number of 1 Bits",
      "difficulty": "easy",
      "description": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\nNote:\n- Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n- In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 11,
          "expected": 3
        },
        {
          "id": 2,
          "n": 128,
          "expected": 1
        },
        {
          "id": 3,
          "n": 4294967293,
          "expected": 31
        },
        {
          "id": 4,
          "n": 0,
          "expected": 0
        },
        {
          "id": 5,
          "n": 1,
          "expected": 1
        }
      ]
    },
    {
      "id": "counting-bits",
      "title": "Counting Bits",
      "difficulty": "easy",
      "description": "Given an integer `n`, return an array `ans` of length `n + 1` such that for each `i` (`0 <= i <= n`), `ans[i]` is the number of `1`'s in the binary representation of `i`.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 2,
          "expected": [0,1,1]
        },
        {
          "id": 2,
          "n": 5,
          "expected": [0,1,1,2,1,2]
        },
        {
          "id": 3,
          "n": 0,
          "expected": [0]
        },
        {
          "id": 4,
          "n": 1,
          "expected": [0,1]
        },
        {
          "id": 5,
          "n": 8,
          "expected": [0,1,1,2,1,2,2,3,1]
        }
      ]
    },
    {
      "id": "reverse-bits",
      "title": "Reverse Bits",
      "difficulty": "easy",
      "description": "Reverse bits of a given 32 bits unsigned integer.\n\nNote:\n- Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n- In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 43261596,
          "expected": 964176192
        },
        {
          "id": 2,
          "n": 4294967293,
          "expected": 3221225471
        },
        {
          "id": 3,
          "n": 0,
          "expected": 0
        },
        {
          "id": 4,
          "n": 1,
          "expected": 2147483648
        },
        {
          "id": 5,
          "n": 2147483648,
          "expected": 1
        }
      ]
    },
    {
      "id": "missing-number",
      "title": "Missing Number",
      "difficulty": "easy",
      "description": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [3,0,1],
          "expected": 2
        },
        {
          "id": 2,
          "nums": [0,1],
          "expected": 2
        },
        {
          "id": 3,
          "nums": [9,6,4,2,3,5,7,0,1],
          "expected": 8
        },
        {
          "id": 4,
          "nums": [0],
          "expected": 1
        },
        {
          "id": 5,
          "nums": [1],
          "expected": 0
        }
      ]
    },
    {
      "id": "sum-of-two-integers",
      "title": "Sum of Two Integers",
      "difficulty": "medium",
      "description": "Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "a": 1,
          "b": 2,
          "expected": 3
        },
        {
          "id": 2,
          "a": 2,
          "b": 3,
          "expected": 5
        },
        {
          "id": 3,
          "a": -2,
          "b": 3,
          "expected": 1
        },
        {
          "id": 4,
          "a": -1,
          "b": 1,
          "expected": 0
        },
        {
          "id": 5,
          "a": 5,
          "b": -3,
          "expected": 2
        }
      ]
    },
    {
      "id": "power-of-two",
      "title": "Power of Two",
      "difficulty": "easy",
      "description": "Given an integer `n`, return `true` if it is a power of two. Otherwise, return `false`.\n\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2^x`.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 1,
          "expected": true
        },
        {
          "id": 2,
          "n": 16,
          "expected": true
        },
        {
          "id": 3,
          "n": 3,
          "expected": false
        },
        {
          "id": 4,
          "n": 0,
          "expected": false
        },
        {
          "id": 5,
          "n": 1024,
          "expected": true
        }
      ]
    },
    {
      "id": "rotate-array",
      "title": "Rotate Array",
      "difficulty": "medium",
      "description": "Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.\n\nFollow up:\n- Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.\n- Could you do it in-place with O(1) extra space?",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [1,2,3,4,5,6,7],
          "k": 3,
          "expected": [5,6,7,1,2,3,4]
        },
        {
          "id": 2,
          "nums": [-1,-100,3,99],
          "k": 2,
          "expected": [3,99,-1,-100]
        },
        {
          "id": 3,
          "nums": [1],
          "k": 0,
          "expected": [1]
        },
        {
          "id": 4,
          "nums": [1,2],
          "k": 3,
          "expected": [2,1]
        },
        {
          "id": 5,
          "nums": [1,2,3],
          "k": 4,
          "expected": [3,1,2]
        }
      ]
    },
    {
      "id": "happy-number",
      "title": "Happy Number",
      "difficulty": "easy",
      "description": "Write an algorithm to determine if a number `n` is happy.\n\nA happy number is a number defined by the following process:\n- Starting with any positive integer, replace the number by the sum of the squares of its digits.\n- Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n- Those numbers for which this process ends in 1 are happy.\n\nReturn `true` if `n` is a happy number, and `false` if not.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 19,
          "expected": true
        },
        {
          "id": 2,
          "n": 2,
          "expected": false
        },
        {
          "id": 3,
          "n": 1,
          "expected": true
        },
        {
          "id": 4,
          "n": 7,
          "expected": true
        },
        {
          "id": 5,
          "n": 116,
          "expected": false
        }
      ]
    },
    {
      "id": "factorial-trailing-zeroes",
      "title": "Factorial Trailing Zeroes",
      "difficulty": "medium",
      "description": "Given an integer `n`, return the number of trailing zeroes in `n!`.\n\nNote that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "n": 3,
          "expected": 0
        },
        {
          "id": 2,
          "n": 5,
          "expected": 1
        },
        {
          "id": 3,
          "n": 0,
          "expected": 0
        },
        {
          "id": 4,
          "n": 25,
          "expected": 6
        },
        {
          "id": 5,
          "n": 100,
          "expected": 24
        }
      ]
    },
    {
      "id": "excel-sheet-column-number",
      "title": "Excel Sheet Column Number",
      "difficulty": "easy",
      "description": "Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n...",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "columnTitle": "A",
          "expected": 1
        },
        {
          "id": 2,
          "columnTitle": "AB",
          "expected": 28
        },
        {
          "id": 3,
          "columnTitle": "ZY",
          "expected": 701
        },
        {
          "id": 4,
          "columnTitle": "AAA",
          "expected": 703
        },
        {
          "id": 5,
          "columnTitle": "FXSHRXW",
          "expected": 2147483647
        }
      ]
    }
  ]
}