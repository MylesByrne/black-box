{
  "problems" : [
    {
      "id": "top-k-frequent-elements",
      "title": "Top K Frequent Elements",
      "difficulty": "medium",
      "testCaseArgs": "testCase['nums'], testCase['k']",
      "testCaseArgsJs": ["nums", "k"],
      "testCaseInputFormat": "nums={testCase['nums']}, k={testCase['k']}",
      "topic": "Arrays and Hashing",
      "codeTemplate": "def topKFrequent(nums, k):\n    # Your code here\n    pass",
      "functionName": "topKFrequent",
      "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\n\nExample:\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n\nInput: nums = [1], k = 1\nOutput: [1]",
      "dependencies": [],
      "testCases": [
        {
          "id": 1,
          "nums": [1, 1, 1, 2, 2, 3],
          "k": 2,
          "expected": [1, 2]
        },
        {
          "id": 2,
          "nums": [1],
          "k": 1,
          "expected": [1]
        },
        {
          "id": 3,
          "nums": [4, 1, -1, 2, -1, 2, 3],
          "k": 2,
          "expected": [-1, 2]
        },
        {
          "id": 4,
          "nums": [1, 2, 3, 4, 5, 5, 5],
          "k": 1,
          "expected": [5]
        },
        {
          "id": 5,
          "nums": [3, 0, 1, 0],
          "k": 1,
          "expected": [0]
        }
      ]
    },{
  "id": "product-of-array-except-self",
  "title": "Product of Array Except Self",
  "difficulty": "medium",
  "testCaseArgs": "testCase['nums']",
  "testCaseArgsJs": ["nums"],
  "testCaseInputFormat": "nums={testCase['nums']}",
  "topic": "Arrays and Hashing",
  "codeTemplate": "def productExceptSelf(nums):\n    # Your code here\n    pass",
  "functionName": "productExceptSelf",
  "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n\nExample:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]",
  "dependencies": [],
  "testCases": [
    {
      "id": 1,
      "nums": [1, 2, 3, 4],
      "expected": [24, 12, 8, 6]
    },
    {
      "id": 2,
      "nums": [-1, 1, 0, -3, 3],
      "expected": [0, 0, 9, 0, 0]
    },
    {
      "id": 3,
      "nums": [2, 3, 4, 5],
      "expected": [60, 40, 30, 24]
    },
    {
      "id": 4,
      "nums": [1, 0],
      "expected": [0, 1]
    },
    {
      "id": 5,
      "nums": [-1, -2, -3],
      "expected": [6, 3, 2]
    }
  ]
    }, 
    {
  "id": "valid-sudoku",
  "title": "Valid Sudoku",
  "difficulty": "medium",
  "testCaseArgs": "testCase['board']",
  "testCaseArgsJs": ["board"],
  "testCaseInputFormat": "board={testCase['board']}",
  "topic": "Arrays and Hashing",
  "codeTemplate": "def isValidSudoku(board):\n    # Your code here\n    pass",
  "functionName": "isValidSudoku",
  "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\n1. Each row must contain the digits 1-9 without repetition.\n2. Each column must contain the digits 1-9 without repetition.\n3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nNote:\n- A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n- Only the filled cells need to be validated according to the mentioned rules.\n\nExample:\nInput: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true",
  "dependencies": [],
  "testCases": [
    {
      "id": 1,
      "board": [
        ["5","3",".",".",".",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
      ],
      "expected": "True"
    },
    {
      "id": 2,
      "board": [
        ["8","3",".",".",".",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
      ],
      "expected": "False"
    },
    {
      "id": 3,
      "board": [
        [".",".",".",".","5",".",".","1","."],
        [".","4",".","3",".",".",".",".","."],
        [".",".",".",".",".","3",".",".","1"],
        ["8",".",".",".",".",".",".","2","."],
        [".",".","2",".","7",".",".",".","."],
        [".","1","5",".",".",".",".",".","."],
        [".",".",".",".",".","2",".",".","."],
        [".","2",".","9",".",".",".",".","."],
        [".",".","4",".",".",".",".",".","."]
      ],
      "expected": "False"
    },
    {
      "id": 4,
      "board": [
        [".",".","4",".",".",".","6","3","."],
        [".",".",".",".",".",".",".",".","."],
        ["5",".",".",".",".",".",".","9","."],
        [".",".",".","5","6",".",".",".","."],
        ["4",".","3",".",".",".",".",".","1"],
        [".",".",".","7",".",".",".",".","."],
        [".",".",".","5",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
      ],
      "expected": "False"
    },
    {
      "id": 5,
      "board": [
        [".",".",".",".",".",".",".",".","2"],
        [".",".",".",".",".",".","6",".","."],
        [".",".","1","4",".",".","8",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".","2","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]]
      ,
      "expected": "True"
    }
  ]
}, 
{
  "id": "longest-consecutive-sequence",
  "title": "Longest Consecutive Sequence",
  "difficulty": "medium",
  "testCaseArgs": "testCase['nums']",
  "testCaseArgsJs": ["nums"],
  "testCaseInputFormat": "nums={testCase['nums']}",
  "topic": "Arrays and Hashing",
  "codeTemplate": "def longestConsecutive(nums):\n    # Your code here\n    pass",
  "functionName": "longestConsecutive",
  "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n\nYou must write an algorithm that runs in O(n) time.\n\nExample:\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9",
  "dependencies": [],
  "testCases": [
    {
      "id": 1,
      "nums": [100, 4, 200, 1, 3, 2],
      "expected": 4
    },
    {
      "id": 2,
      "nums": [0, 3, 7, 2, 5, 8, 4, 6, 0, 1],
      "expected": 9
    },
    {
      "id": 3,
      "nums": [],
      "expected": 0
    },
    {
      "id": 4,
      "nums": [1, 2, 0, 1],
      "expected": 3
    },
    {
      "id": 5,
      "nums": [9, 1, 4, 7, 3, -1, 0, 5, 8, -1, 6],
      "expected": 7
    }
  ]
}
  ]
}